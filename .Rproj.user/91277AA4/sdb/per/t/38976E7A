{
    "collab_server" : "",
    "contents" : "# DR approach\nrm(list=ls())\nsetwd('/Users/weigehuang/Dropbox/Int Gen Mobility/New Version Data and Codes/Figures and latex codes')\ndata=read.csv('data.csv')[,-1]\n\n# log children and family incomes\nlincome=log(childincome)\nlfincome=log(fincome)\n\n# poverty levery at 2001: 42228\n\ny_0=c(unname(quantile(lincome,0.117)),unname(quantile(lincome,0.9)))\ny_0=as.matrix(sort(y_0))\n\n# note: use cutoff values between 5th and 95th quantile of observed child's incomes to advoid wierd beta estimators\n\n# create the indicator dependent variables '1(Y <= y_0)' for each 'y_0'\nindicatormatrix=matrix(0,nrow = nrow(data),ncol = nrow(y_0))\nfor(i in 1:nrow(data)){\n  for(j in 1:nrow(y_0))\n    if (lincome[i] <= y_0[j]) {\n      indicatormatrix[i,j]=1\n    }\n  else indicatormatrix[i,j]=0\n}\ndim(indicatormatrix)\n\n# create new dataset\nnewdata=cbind(indicatormatrix,lfincome,lincome,data)\n\n# run logistic model of '1(Y <= y_0)' on X for each cutoff value 'y_0' and save as list\nmodel_no=list(list())\nfor(i in 1:ncol(indicatormatrix)){\n  model_no[[i]] <- glm(newdata[,i] ~ lfincome,family=binomial(link='logit'),data=newdata)\n}\n\n\nmodel=list(list())\nfor(i in 1:ncol(indicatormatrix)){\n  model[[i]] <- glm(newdata[,i] ~ lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college,family=binomial(link='logit'),data=newdata)\n}\n\n\n# create counterfactual family incomes\nt=lfincome[!duplicated(lfincome)]\nt=sort(t)\nN_t=20\nt=seq(min(t),max(t),length.out=N_t)\n\n# to obtain counterfactual distribution function 'F_yt_y0'(each column) for each counterfactual family income\nF_yt_y0=matrix(0,nrow = length(y_0),ncol = length(t))\nfor (i in 1: length(y_0)){\n  for(j in 1:length(t)){\n    predictinput=data.frame(cbind(t[j],newdata[,names(model[[i]]$model)[c(-1,-2)]]))\n    names(predictinput)<-names(model[[i]]$model)[-1]\n    F_yt_y0[i,j]=mean(predict(model[[i]],predictinput,type = 'response'))\n  }\n}\n\n# without covariates\nF_yt_y0_no=matrix(0,nrow = length(y_0),ncol = length(t))\nfor (i in 1: length(y_0)){\n  for(j in 1:length(t)){\n    predictinput=data.frame(cbind(t[j],newdata[,names(model_no[[i]]$model)[c(-1,-2)]]))\n    names(predictinput)<-names(model_no[[i]]$model)[-1]\n    F_yt_y0_no[i,j]=mean(predict(model_no[[i]],predictinput,type = 'response'))\n  }\n}\n\n\n# rearrange the F_yt_y0 matrix using method used in QUANTILE AND PROBABILITY CURVES WITHOUT CROSSING.\n# the result is very similar the one by ordering the matrix: F <- apply(F_yt_y0, 2, function(x) x[order(x)])\nlibrary(Rearrangement)\n# use apply function\n# F_yt_y0_rearranged=apply(F_yt_y0, 2, function(x) rearrangement(as.data.frame(y_0),x))\n# F <- apply(F_yt_y0, 2, function(x) x[order(x)])\n\n# to abtain rearranged counterfactual distribution functions\nF_yt_y0_rearranged=F_yt_y0\nfor(i in 1:ncol(F_yt_y0)){\n  F_yt_y0_rearranged[,i]=rearrangement(as.data.frame(y_0),F_yt_y0[,i])\n}\n\nF_yt_y0_rearranged_no=F_yt_y0_no\nfor(i in 1:ncol(F_yt_y0_no)){\n  F_yt_y0_rearranged_no[,i]=rearrangement(as.data.frame(y_0),F_yt_y0_no[,i])\n}\n\n# inference\n# bootstrap\n\n# create bootstrap data\nsize=nrow(newdata)\nB=20\nbootstrapdata=list(list())\nset.seed(888)\nfor(i in 1:B){\n  bootstrapdata[[i]]=newdata[sample(1:nrow(newdata), size, replace=TRUE),]\n}\n\n# to obtain conditional distribution functions for each bootstrap sample, put into different list\n\n# to obtain different counterfactual distribution and quantile functions for bootstrap samples\nlibrary(foreach)\nlibrary(doParallel)\n#setup parallel backend to use many processors\ncores=detectCores()\ncl <- makeCluster(cores[1]-1) #not to overload your computer\nregisterDoParallel(cl)\n\npt <- proc.time()\nBlist=list(list())\nBlist<-foreach(b=1:B, .combine=cbind, .packages = c(\"data.table\")) %dopar% {\n  \n  b_model=list(list())\n  for(i in 1:ncol(indicatormatrix)){\n    b_model[[i]] <- glm(as.data.frame(bootstrapdata[[b]])[,i]  ~ lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college,family=binomial(link='logit'),data=as.data.frame(bootstrapdata[[b]]))\n  }\n  \n  b_model_no=list(list())\n  for(i in 1:ncol(indicatormatrix)){\n    b_model_no[[i]] <- glm(as.data.frame(bootstrapdata[[b]])[,i]  ~ lfincome,family=binomial(link='logit'),data=as.data.frame(bootstrapdata[[b]]))\n  }\n  # create counterfactual log family incomes 't's \n  #t=lfincome[!duplicated(lfincome)]\n  #t=as.matrix(sort(t))\n  #N_t=20\n  #t=seq(min(t),max(t),length.out=N_t)\n  \n  # to obtain counterfactual distribution functions 'b_F_yt_y0' for each bootstrap sample\n  b_F_yt_y0=matrix(0,nrow = length(y_0),ncol = length(t))\n  for (i in 1: length(y_0)){\n    for(j in 1:length(t)){\n      predictinput=data.frame(cbind(t[j],newdata[,names(b_model[[i]]$model)[c(-1,-2)]]))\n      names(predictinput)<-names(b_model[[i]]$model)[-1]\n      b_F_yt_y0[i,j]=mean(predict(b_model[[i]],predictinput,type = 'response'))\n    }\n  }\n  \n  \n  b_F_yt_y0_no=matrix(0,nrow = length(y_0),ncol = length(t))\n  for (i in 1: length(y_0)){\n    for(j in 1:length(t)){\n      predictinput=data.frame(cbind(t[j],newdata[,names(b_model_no[[i]]$model)[c(-1,-2)]]))\n      names(predictinput)<-names(b_model_no[[i]]$model)[-1]\n      b_F_yt_y0_no[i,j]=mean(predict(b_model_no[[i]],predictinput,type = 'response'))\n    }\n  }\n  library(Rearrangement)\n  # to obtain rearranged counterfactual distribution functions 'b_F_yt_y0_rearranged'\n  b_F_yt_y0_rearranged=b_F_yt_y0\n  for(i in 1:ncol(b_F_yt_y0)){\n    b_F_yt_y0_rearranged[,i]=rearrangement(as.data.frame(y_0),b_F_yt_y0[,i])\n  }\n  \n  b_F_yt_y0_rearranged_no=b_F_yt_y0_no\n  for(i in 1:ncol(b_F_yt_y0)){\n    b_F_yt_y0_rearranged_no[,i]=rearrangement(as.data.frame(y_0),b_F_yt_y0_no[,i])\n  }\n  \n  \n  Blist<-list(b_F_yt_y0_rearranged,b_F_yt_y0_rearranged_no)\n  return(Blist)\n}\nproc.time() - pt\n#stop cluster\nstopCluster(cl)\n\n# 10th quantile\nq_10=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_10[b,j]=Blist[[b]][1,j]\n  }\n}\n\n\nq_10_no=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_10_no[b,j]=Blist[[b+B]][1,j]\n  }\n}\n\n\n\n# 90th quantile\nq_90=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_90[b,j]=Blist[[b]][2,j]\n  }\n}\n\nq_90_no=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_90_no[b,j]=Blist[[b+B]][2,j]\n  }\n}\n\n\npdf('dr_disFunds.pdf')\nplot(t,F_yt_y0_rearranged_no[1,],type = 'l',\n     ylab = 'Probability',xlab = 'Counterfactual treatments',ylim = c(-.2,0.6))\nlines(t,1-F_yt_y0_rearranged_no[2,],col='red')\nlines(t,F_yt_y0_rearranged_no[1,]+1.96*apply(q_10_no,2,sd),lty=2)\nlines(t,F_yt_y0_rearranged_no[1,]-1.96*apply(q_10_no,2,sd),lty=2)\nlines(t,1-(F_yt_y0_rearranged_no[2,]+1.96*apply(q_10_no,2,sd)),lty=2,col='red')\nlines(t,1-(F_yt_y0_rearranged_no[2,]-1.96*apply(q_10_no,2,sd)),lty=2,col='red')\nlegend('topleft',c('Below poverty','Above 90th quantile'),\n       lwd=c(0.5,0.5),col=c('black','red'),cex = 0.5) \ndev.off()\n\npdf('dr_disFunds90.pdf')\nplot(t,1-F_yt_y0_rearranged_no[2,],type = 'l',\n     ylab = 'Probability of being above 90th quantile',xlab = 'Counterfactual treatments',ylim = c(-.2,0.6))\nlines(t,1-(F_yt_y0_rearranged_no[2,]+1.96*apply(q_10_no,2,sd)),lty=2,col='red')\nlines(t,1-(F_yt_y0_rearranged_no[2,]-1.96*apply(q_10_no,2,sd)),lty=2,col='red')\n#legend('topleft',c('Below poverty','Above 90th quantile'),lwd=c(0.5,0.5),col=c('black','red'),cex = 0.5) \ndev.off()\n\npdf('dr_disFundsP.pdf')\nplot(t,F_yt_y0_rearranged_no[1,],type = 'l',\n     ylab = 'Probability of being below poverty rate',xlab = 'Counterfactual treatments',ylim = c(-.2,0.6))\n\nlines(t,F_yt_y0_rearranged_no[1,]+1.96*apply(q_10_no,2,sd),lty=2,col='red')\nlines(t,F_yt_y0_rearranged_no[1,]-1.96*apply(q_10_no,2,sd),lty=2,col='red')\n#legend('topleft',c('Below poverty','Above 90th quantile'),lwd=c(0.5,0.5),col=c('black','red'),cex = 0.5) \ndev.off()\n\n# differences\nd_poverty_var=q_10_no-q_10\nd_q90_var=q_90_no-q_90\n\nd=F_yt_y0_rearranged_no -F_yt_y0_rearranged\n\npdf('dr_d.pdf')\nplot(t,d[1,],type = 'l',\n     ylab = 'Differences',xlab = 'Counterfactual treatments',ylim = c(-0.4,0.4))\nlines(t,d[2,],col='red')\nlines(t,d[1,]+1.96*apply(d_poverty_var,2,sd),lty=2)\nlines(t,d[1,]-1.96*apply(d_poverty_var,2,sd),lty=2)\nlines(t,d[2,]+1.96*apply(d_q90_var,2,sd),lty=2,col='red')\nlines(t,d[2,]-1.96*apply(d_q90_var,2,sd),lty=2,col='red')\nlegend('topleft',c('Poverty','90th quantile'),\n       lwd=c(0.5,0.5),col=c('black','red'),cex = 0.5) \ndev.off()\n\npdf('dr_d_poverty.pdf')\nplot(t,d[1,],type = 'l',\n     ylab = 'Differences',xlab = 'Counterfactual treatments',ylim = c(-0.4,0.4))\n#lines(t,d[2,],col='red')\nlines(t,d[1,]+1.96*apply(d_poverty_var,2,sd),lty=2,col='red')\nlines(t,d[1,]-1.96*apply(d_poverty_var,2,sd),lty=2,col='red')\n#lines(t,d[2,]+1.96*apply(d_q90_var,2,sd),lty=2,col='red')\n#lines(t,d[2,]-1.96*apply(d_q90_var,2,sd),lty=2,col='red')\ndev.off()\n\npdf('dr_d_90.pdf')\nplot(t,d[2,],type = 'l',\n     ylab = 'Differences',xlab = 'Counterfactual treatments',ylim = c(-0.4,0.4))\n#lines(t,d[2,],col='red')\n#lines(t,d[1,]+1.96*apply(d_poverty_var,2,sd),lty=2)\n#lines(t,d[1,]-1.96*apply(d_poverty_var,2,sd),lty=2)\nlines(t,d[2,]+1.96*apply(d_q90_var,2,sd),lty=2,col='red')\nlines(t,d[2,]-1.96*apply(d_q90_var,2,sd),lty=2,col='red')\ndev.off()\n\n\npdf('dr_disFundsG.pdf')\nplot(t,1-F_yt_y0_rearranged_no[1,],type = 'l',\n     ylab = 'Probability of being greater than thredhold',xlab = 'Counterfactual treatments',ylim = c(-.1,1))\nlines(t,1-F_yt_y0_rearranged_no[2,],col='red')\nlines(t,1-(F_yt_y0_rearranged_no[1,]+1.96*apply(q_10_no,2,sd)),lty=2)\nlines(t,1-(F_yt_y0_rearranged_no[1,]-1.96*apply(q_10_no,2,sd)),lty=2)\nlines(t,1-(F_yt_y0_rearranged_no[2,]+1.96*apply(q_10_no,2,sd)),lty=2,col='red')\nlines(t,1-(F_yt_y0_rearranged_no[2,]-1.96*apply(q_10_no,2,sd)),lty=2,col='red')\nlegend('topleft',c('Poverty','90th quantile'),\n       lwd=c(0.5,0.5),col=c('black','red'),cex = 0.5) \ndev.off()\n",
    "created" : 1504017466357.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3958432875",
    "id" : "38976E7A",
    "lastKnownWriteTime" : 1501971246,
    "last_content_update" : 1501971246,
    "path" : "~/Dropbox/Int Gen Mobility/New Version Data and Codes/R codes/proverty.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}