{
    "collab_server" : "",
    "contents" : "# DR approach\nrm(list=ls())\nsetwd('/Users/weigehuang/Dropbox/Int Gen Mobility/New Version Data and Codes/Figures and latex codes')\ndata=read.csv('igedata.csv')\n# create education dummy variables\nattach(data)\ndata$lesshigh = ifelse ( ( headeduc <= 11 ), 1 , 0 )\ndata$high=ifelse ( ( headeduc == 12 ), 1 , 0 )\ndata$somecollege=ifelse ( ( 12< headeduc & headeduc < 16 ), 1 , 0 )\ndata$college=ifelse ( ( headeduc == 16 ), 1 , 0 )\ndata$advanced=ifelse ( ( headeduc > 16 ), 1 , 0 )\n\n# square child and family head's age\ndata$age2=age*age\ndata$headage2=headage*headage\n\nwrite.csv(data,file = 'data.csv')\n\n# log children and family incomes\nlincome=log(childincome)\nlfincome=log(fincome)\n\n# create the cutoff values \"y_0\"\ny_0=lincome[!duplicated(lincome)]\ny_0=as.matrix(sort(y_0))\ny_0=subset(y_0,quantile(y_0,0.05)<y_0 & y_0<quantile(y_0,0.95))\n# note: use cutoff values between 5th and 95th quantile of observed child's incomes to advoid wierd beta estimators\n\n# create the indicator dependent variables '1(Y <= y_0)' for each 'y_0'\nindicatormatrix=matrix(0,nrow = nrow(data),ncol = nrow(y_0))\nfor(i in 1:nrow(data)){\n  for(j in 1:nrow(y_0))\n    if (lincome[i] <= y_0[j]) {\n      indicatormatrix[i,j]=1\n    }\n  else indicatormatrix[i,j]=0\n}\ndim(indicatormatrix)\n\n\n# create new dataset\nnewdata=cbind(indicatormatrix,lfincome,lincome,data)\n\n# run logistic model of '1(Y <= y_0)' on X for each cutoff value 'y_0' and save as list\nmodel=list(list())\nfor(i in 1:ncol(indicatormatrix)){\n  model[[i]] <- glm(newdata[,i] ~ lfincome,family=binomial(link='logit'),data=newdata)\n}\n\n# obtain the coefficients on log family income from models\ncoefficients_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    coefficients_matrix[i,j]=( model[[j]]$coefficients)[i]\n  }\n}\n\nse_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    se_matrix[i,j]=summary( model[[j]])$coefficients[,2][2]\n  }\n}\n\n# obtain standard errors for coefficients\nse_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    se_matrix[i,j]=summary( model[[j]])$coefficients[,2][i]\n  }\n}\n\nse_matrix5=coefficients_matrix - 1.96*se_matrix\nse_matrix95=coefficients_matrix + 1.96*se_matrix\n\n# lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college\n# plot coefficiencts against log family incomes for different model with corresponding 'y_0 '\npdf(\"coefficients_dr_lfincome_nocovariates.pdf\")\nplot(y_0,coefficients_matrix[2,],type = 'l',ylim = c(-2.5,1),xlab = \"Thresholds (model without covariates)\",ylab = 'Coefficients on log family Incomes')\nlines(y_0,se_matrix5[2,],col='red',lty=2)\nlines(y_0,se_matrix95[2,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_constant_nocovariates.pdf\")\nplot(y_0,coefficients_matrix[1,],type = 'l',xlab = \"Thresholds (model without covariates)\",ylab = 'Constant',ylim=c(-10,25))\nlines(y_0,se_matrix5[1,],col='red',lty=2)\nlines(y_0,se_matrix95[1,],col='red',lty=2)\ndev.off()\n\n\n# run logistic model of '1(Y <= y_0)' on X for each cutoff value 'y_0' and save as list\nmodel=list(list())\nfor(i in 1:ncol(indicatormatrix)){\n  model[[i]] <- glm(newdata[,i] ~ lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college,family=binomial(link='logit'),data=newdata)\n}\n\n# obtain the coefficients on log family income from models\ncoefficients_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    coefficients_matrix[i,j]=( model[[j]]$coefficients)[i]\n  }\n}\n\nse_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    se_matrix[i,j]=summary( model[[j]])$coefficients[,2][2]\n  }\n}\n\n# obtain standard errors for coefficients\nse_matrix=matrix(0,nrow =nrow(as.matrix(model[[1]]$coefficients)),ncol =length(model)  )\nfor(i in 1: nrow(as.matrix(model[[1]]$coefficients))){\n  for(j in 1:length(model)){\n    se_matrix[i,j]=summary( model[[j]])$coefficients[,2][i]\n  }\n}\n\nse_matrix5=coefficients_matrix - 1.96*se_matrix\nse_matrix95=coefficients_matrix + 1.96*se_matrix\n\n# lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college\n# plot coefficiencts against log family incomes for different model with corresponding 'y_0 '\npdf(\"coefficients_dr_lfincome.pdf\")\nplot(y_0,coefficients_matrix[2,],type = 'l',ylim = c(-3,1),xlab = \"Thresholds\",ylab = 'Coefficients on log family Incomes')\nlines(y_0,se_matrix5[2,],col='red',lty=2)\nlines(y_0,se_matrix95[2,],col='red',lty=2)\ndev.off()\n# mtext('Coefficient on log family Income for different \\n model corresponding to different cutoff value y_0',side = 3,line = -3, outer = TRUE,font = 2)\n# mtext('Figure',side = 1,line = -1, outer = TRUE,font = 2)\npdf(\"coefficients_dr_constant.pdf\")\nplot(y_0,coefficients_matrix[1,],type = 'l',xlab = \"Thresholds\",ylab = 'Constant',ylim = c(-40,70))\nlines(y_0,se_matrix5[1,],col='red',lty=2)\nlines(y_0,se_matrix95[1,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_age.pdf\")\nplot(y_0,coefficients_matrix[3,],type = 'l',xlab = \"Thresholds\",ylab = \"Coefficients on Head's Age\",\n     ylim = c(-4,3))\nlines(y_0,se_matrix5[3,],col='red',lty=2)\nlines(y_0,se_matrix95[3,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_age2.pdf\")\nplot(y_0,coefficients_matrix[4,],type = 'l',xlab = \"Thresholds\",ylab = \"Coefficients on Head's Age Square\",ylim = c(-0.03,.04))\nlines(y_0,se_matrix5[4,],col='red',lty=2)\nlines(y_0,se_matrix95[4,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_sex.pdf\")\nplot(y_0,coefficients_matrix[5,],type = 'l',xlab = \"Thresholds\",ylab = \"Coefficients on Children's sex\",ylim=c(-5,0.5))\nlines(y_0,se_matrix5[5,],col='red',lty=2)\nlines(y_0,se_matrix95[5,],col='red',lty=2)\ndev.off()\n\n\npdf(\"coefficients_dr_headage.pdf\")\nplot(y_0,coefficients_matrix[6,],type = 'l',ylim = c(-1,1),xlab = \"Thresholds\",ylab = \"Coefficients on Head's Age\")\nlines(y_0,se_matrix5[6,],col='red',lty=2)\nlines(y_0,se_matrix95[6,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_headage2.pdf\")\nplot(y_0,coefficients_matrix[7,],type = 'l',ylim = c(-0.01,0.01),xlab = \"Thresholds\",ylab =\"Coefficients on Head's Age Square\" )\nlines(y_0,se_matrix5[7,],col='red',lty=2)\nlines(y_0,se_matrix95[7,],col='red',lty=2)\ndev.off()\n\n\npdf(\"coefficients_dr_headsex.pdf\")\nplot(y_0,coefficients_matrix[8,],type = 'l',ylim = c(-4,3),xlab = \"Thresholds\",ylab = \"Coefficients on Head's Sex\")\nlines(y_0,se_matrix5[8,],col='red',lty=2)\nlines(y_0,se_matrix95[8,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_hveteran.pdf\")\nplot(y_0,coefficients_matrix[9,],type = 'l',ylim = c(-1.5,1.5),xlab = \"Thresholds\",ylab = \"Coefficients on Head's Veteran Status\")\nlines(y_0,se_matrix5[9,],col='red',lty=2)\nlines(y_0,se_matrix95[9,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_lesshigh.pdf\")\nplot(y_0,coefficients_matrix[10,],type = 'l',ylim = c(-2,5),xlab = \"Thresholds\",ylab = \"Coefficients on Less than High School\")\nlines(y_0,se_matrix5[10,],col='red',lty=2)\nlines(y_0,se_matrix95[10,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_high.pdf\")\nplot(y_0,coefficients_matrix[11,],type = 'l',ylim = c(-1.5,4.5),xlab = \"Thresholds\",ylab =  \"Coefficients on High School\")\nlines(y_0,se_matrix5[11,],col='red',lty=2)\nlines(y_0,se_matrix95[11,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_somecollege.pdf\")\nplot(y_0,coefficients_matrix[12,],type = 'l',ylim = c(-1.5,5),xlab = \"Thresholds\",ylab =  \"Coefficients on Some College\")\nlines(y_0,se_matrix5[12,],col='red',lty=2)\nlines(y_0,se_matrix95[12,],col='red',lty=2)\ndev.off()\n\npdf(\"coefficients_dr_college.pdf\")\nplot(y_0,coefficients_matrix[13,],type = 'l',ylim = c(-1.5,4.5),xlab = \"Thresholds\",ylab =  \"Coefficients on College\")\nlines(y_0,se_matrix5[13,],col='red',lty=2)\nlines(y_0,se_matrix95[13,],col='red',lty=2)\ndev.off()\n\n\n\n\n\n# create counterfactual family incomes\nt=lfincome[!duplicated(lfincome)]\nt=sort(t)\nN_t=20\nt=seq(min(t),max(t),length.out=N_t)\n\n# to obtain counterfactual distribution function 'F_yt_y0'(each column) for each counterfactual family income\nF_yt_y0=matrix(0,nrow = length(y_0),ncol = length(t))\nfor (i in 1: length(y_0)){\n  for(j in 1:length(t)){\n    predictinput=data.frame(cbind(t[j],newdata[,names(model[[i]]$model)[c(-1,-2)]]))\n    names(predictinput)<-names(model[[i]]$model)[-1]\n    F_yt_y0[i,j]=mean(predict(model[[i]],predictinput,type = 'response'))\n  }\n}\n\n\n# rearrange the F_yt_y0 matrix using method used in QUANTILE AND PROBABILITY CURVES WITHOUT CROSSING.\n# the result is very similar the one by ordering the matrix: F <- apply(F_yt_y0, 2, function(x) x[order(x)])\nlibrary(Rearrangement)\n# use apply function\n# F_yt_y0_rearranged=apply(F_yt_y0, 2, function(x) rearrangement(as.data.frame(y_0),x))\n# F <- apply(F_yt_y0, 2, function(x) x[order(x)])\n\n# to abtain rearranged counterfactual distribution functions\nF_yt_y0_rearranged=F_yt_y0\nfor(i in 1:ncol(F_yt_y0)){\n  F_yt_y0_rearranged[,i]=rearrangement(as.data.frame(y_0),F_yt_y0[,i])\n}\n\n\n# plot counterfactual distribution functions\npdf('counter_dfs_dr.pdf')\npar(mfrow=c(1,2))\nplot(y_0,F_yt_y0[,5],type = 'l',ylab = '',xlab = '')\nfor(i in 1:ncol(F_yt_y0)){\n  lines(y_0,F_yt_y0[,i],col=i)\n}\nlegend('topleft','Non-rearranged',cex = 0.5)\nplot(y_0,F_yt_y0_rearranged[,1],type = 'l',ylab = '',xlab = '')\nfor(i in 1:ncol(F_yt_y0_rearranged)){\n  lines(y_0,F_yt_y0_rearranged[,i],col=i)\n}\nlegend('topleft','Rearranged',cex = 0.5)\nmtext('Thresholds',side = 1,line = -3.5, outer = TRUE,cex = 1)\nmtext('Probability of counterfactual outcome \\n greater than the threshold',side = 2,line = -2, outer = TRUE,cex = 1)\ndev.off()\n# mtext(\"Counterfactual distribution functions \\n for different treatment levels against cutoff values\", side = 3,line = -3, outer = TRUE,font = 2)\n# mtext('Figure',side = 1,line = -2, outer = TRUE,font = 2)\n\nlibrary(BMisc)\n# use the 'makeDist' function to invert counterfactual distribution functions to quantile functions\n# invert rearranged counterfactual distribution functions to obtain the couterfactual quantile functions for counterfactual log family incomes 't's\n#quan=c(0.01,seq(0.05,0.95,0.05),0.99)\nquan=seq(0.01,0.99,0.01)\nquantile=matrix(0,nrow =length(quan), ncol = ncol(F_yt_y0))\nq=list()\nfor(i in 1:length(quan)){\n  for(j in 1:ncol(F_yt_y0)){\n    q=cbind(q,makeDist(y_0,F_yt_y0_rearranged[,j]))\n    quantile[,j]=quantile(q[[j]],probs = quan,type = 1)\n  }\n}\nAverage=colMeans(quantile)\nquantile=rbind(quantile,Average)\nsave(t,file = 't_dr.RData')\nsave(quantile,file = 'quantiles_dr.RData')\n\n# plot the counterfactual quantiles of log child's incomes\n# against different counterfactual family incomes 't's\npdf('counter_quantiles_dr.pdf')\nplot(t,quantile[10,],type = 'l',ylim=c(9,12.5),ylab = \"Counterfactual Quantiles\",\n     xlab = \"Counterfactual treatments \")\nlines(t,quantile[25,],col='yellow')\nlines(t,quantile[50,],col='blue')\nlines(t,quantile[75,],col='green')\nlines(t,quantile[90,],col='brown')\nlines(t,quantile[nrow(quantile),],col='red') # mean\nlegend('topleft',c(paste(c(10,25,50,75,90),'th Counterfactual Quantiles',sep = ''),'Counterfactual Mean'),\n       lwd=c(0.5,0.5),col=c('black','yellow','blue','green','brown','red'),cex = 0.4)\ndev.off()\n# mtext(\"Counterfactual quantiles \\n of log child's incomes for different treatments\",side = 3,line = -3, outer = TRUE,font = 2)\n# mtext('Figure',side = 1,line = -1, outer = TRUE)\n\n# calculate the IGEs\nfit1 <- lm( quantile[10,]~ t) # 10th\nfit1$coefficients\nfit2 <- lm( quantile[25,]~ t) # 25th\nfit2$coefficients\nfit3 <- lm( quantile[50,]~ t) # 50th\nfit3$coefficients\nfit4 <- lm( quantile[75,]~ t) # 75th\nfit4$coefficients\nfit5 <- lm( quantile[90,]~ t) # 90th\nfit5$coefficients\n# mean\nfit6 <- lm( quantile[100,]~ t) # mean\nfit6$coefficients\n\n\n#plot differences between quantiles\nd_quan90_10=quantile[90,]-quantile[10,]\nd_quan75_25=quantile[75,]-quantile[25,]\nd_quan90_75=quantile[90,]-quantile[75,]\nd_quan25_10=quantile[25,]-quantile[10,]\nd_median_mean=quantile[50,]-Average\n\npdf('differences_quantiles_dr.pdf')\nplot(t,d_quan75_25,type = 'l',ylim=c(-.5,2.5),ylab = 'differences between quantiles',xlab = 'Counterfactual treatments')\nlines(t,d_quan90_10,col='blue')\nlines(t,d_quan90_75,col='brown')\nlines(t,d_quan25_10,col='red')\nlines(t,d_median_mean,col='green')\nlegend('topleft',c('quantile90_10','quantile75_25','quantile90_75','quantile25_10','median_mean'),\n       lwd=c(0.5,0.5),col=c('blue','black','brown','red','green'),cex = 0.6)\ndev.off()\n\n\n# inference\n# bootstrap\n\n# create bootstrap data\nsize=nrow(newdata)\nB=20\nbootstrapdata=list(list())\nset.seed(888)\nfor(i in 1:B){\n  bootstrapdata[[i]]=newdata[sample(1:nrow(newdata), size, replace=TRUE),]\n}\n\n# to obtain conditional distribution functions for each bootstrap sample, put into different list\n\n# to obtain different counterfactual distribution and quantile functions for bootstrap samples\nlibrary(foreach)\nlibrary(doParallel)\n#setup parallel backend to use many processors\ncores=detectCores()\ncl <- makeCluster(cores[1]-1) #not to overload your computer\nregisterDoParallel(cl)\n\npt <- proc.time()\nBlist=list(list())\nBlist<-foreach(b=1:B, .combine=cbind, .packages = c(\"data.table\")) %dopar% {\n\n  b_model=list(list())\n  for(i in 1:ncol(indicatormatrix)){\n    b_model[[i]] <- glm(as.data.frame(bootstrapdata[[b]])[,i]  ~ lfincome+age+age2+sex+headage+headage2+headsex+hveteran+lesshigh+high+somecollege+college,family=binomial(link='logit'),data=as.data.frame(bootstrapdata[[b]]))\n  }\n  # create counterfactual log family incomes 't's\n  #t=lfincome[!duplicated(lfincome)]\n  #t=as.matrix(sort(t))\n  #N_t=20\n  #t=seq(min(t),max(t),length.out=N_t)\n\n  # to obtain counterfactual distribution functions 'b_F_yt_y0' for each bootstrap sample\n  b_F_yt_y0=matrix(0,nrow = length(y_0),ncol = length(t))\n  for (i in 1: length(y_0)){\n    for(j in 1:length(t)){\n      predictinput=data.frame(cbind(t[j],newdata[,names(b_model[[i]]$model)[c(-1,-2)]]))\n      names(predictinput)<-names(b_model[[i]]$model)[-1]\n      b_F_yt_y0[i,j]=mean(predict(b_model[[i]],predictinput,type = 'response'))\n    }\n  }\n  library(Rearrangement)\n  # to obtain rearranged counterfactual distribution functions 'b_F_yt_y0_rearranged'\n  b_F_yt_y0_rearranged=b_F_yt_y0\n  for(i in 1:ncol(b_F_yt_y0)){\n    b_F_yt_y0_rearranged[,i]=rearrangement(as.data.frame(y_0),b_F_yt_y0[,i])\n  }\n\n\n  # to obtain counterfactual quantile functions by inverting the rearranged\n  # counterfactual distribution functions 'b_F_yt_y0_rearranged'\n  library(BMisc)\n  b_quantile=matrix(0,nrow =length(quan), ncol = ncol(b_F_yt_y0_rearranged))\n  q=list()\n  for(i in 1:length(quan)){\n    for(j in 1:ncol(b_F_yt_y0)){\n      q=cbind(q,makeDist(y_0,b_F_yt_y0_rearranged[,j]))\n      b_quantile[,j]=quantile(q[[j]],probs = quan,type = 1)\n    }\n  }\n  b_Average=colMeans(b_quantile)\n  b_quantile=rbind(b_quantile,b_Average)\n\n  Blist<-list(b_quantile)\n  return(Blist)\n}\nproc.time() - pt\n#stop cluster\nstopCluster(cl)\n\n# plot different counterfactual quantiles of log child's incomes against counterfactual family incomes 't's\n\n# 10th quantile\nq_10=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_10[b,j]=Blist[[b]][10,j]\n  }\n}\nq10_sd_t=apply(q_10,2,sd)\nconfident_q10_95=quantile[10,]+1.96*q10_sd_t\nconfident_q10_5=quantile[10,]-1.96*q10_sd_t\n\n# 25th quantile\nq_25=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_25[b,j]=Blist[[b]][25,j]\n  }\n}\nq25_sd_t=apply(q_25,2,sd)\nconfident_q25_95=quantile[25,]+1.96*q25_sd_t\nconfident_q25_5=quantile[25,]-1.96*q25_sd_t\n\n# 50th quantile\nq_50=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_50[b,j]=Blist[[b]][50,j]\n  }\n}\nq50_sd_t=apply(q_50,2,sd)\nconfident_q50_95=quantile[50,]+1.96*q50_sd_t\nconfident_q50_5=quantile[50,]-1.96*q50_sd_t\n\n# 75th quantile\nq_75=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_75[b,j]=Blist[[b]][75,j]\n  }\n}\nq75_sd_t=apply(q_75,2,sd)\nconfident_q75_95=quantile[75,]+1.96*q75_sd_t\nconfident_q75_5=quantile[75,]-1.96*q75_sd_t\n\n# 90th quantile\nq_90=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    q_90[b,j]=Blist[[b]][90,j]\n  }\n}\nq90_sd_t=apply(q_90,2,sd)\nconfident_q90_95=quantile[90,]+1.96*q90_sd_t\nconfident_q90_5=quantile[90,]-1.96*q90_sd_t\n\n# average\naverage=matrix(0,nrow = B, ncol = nrow(as.matrix(t)))\nfor(b in 1:B){\n  for(j in 1:nrow(as.matrix(t))){\n    average[b,j]=Blist[[b]][100,j]\n  }\n}\naverage_sd_t=apply(average,2,sd)\nconfident_average_95=quantile[100,]+1.96*average_sd_t\nconfident_average_5=quantile[100,]-1.96*average_sd_t\n\npdf('counter_quantiles_confidences_dr.pdf')\nplot(t,quantile[10,],type = 'l',xlab = \"Counterfactual treatments\",ylab = \"Counterfactual quantiles\",ylim = c(9,12))\n# mtext(\"Counterfactual quantiles \\n of log child's incomes for different treatments\",side = 3,line = -2.5, outer = TRUE,cex = 1)\n# mtext('Figure--95% confidence bands with 100 bootstap repetitions',side = 1,line = -1, outer = TRUE,font = 1)\n\npolygon(c(t,rev(t)),c(confident_q10_5,rev(confident_q10_95)),col = \"grey70\", border = FALSE)\nlines(t,confident_q10_95,col='black',lty=2)\nlines(t,confident_q10_5,col='black',lty=2)\nlines(t,quantile[10,],col='black')\n\npolygon(c(t,rev(t)),c(confident_q25_5,rev(confident_q25_95)),col = \"grey75\", border = FALSE)\nlines(t,confident_q25_95,col='yellow',lty=2)\nlines(t,confident_q25_5,col='yellow',lty=2)\nlines(t,quantile[25,],col='yellow')\n\npolygon(c(t,rev(t)),c(confident_q50_5,rev(confident_q50_95)),col = \"grey80\", border = FALSE)\nlines(t,confident_q50_95,col='blue',lty=2)\nlines(t,confident_q50_5,col='blue',lty=2)\nlines(t,quantile[50,],col='blue')\n\n\npolygon(c(t,rev(t)),c(confident_q75_5,rev(confident_q75_95)),col = \"grey85\", border = FALSE)\nlines(t,confident_q75_95,col='green',lty=2)\nlines(t,confident_q75_5,col='green',lty=2)\nlines(t,quantile[75,],col='green')\n\npolygon(c(t,rev(t)),c(confident_q90_5,rev(confident_q90_95)),col = \"grey90\", border = FALSE)\nlines(t,confident_q90_95,col='brown',lty=2)\nlines(t,confident_q90_5,col='brown',lty=2)\nlines(t,quantile[90,],col='brown')\n\n# average\npolygon(c(t,rev(t)),c(confident_average_5,rev(confident_average_95)),col = \"grey90\", border = FALSE)\nlines(t,confident_average_95,col='red',lty=2)\nlines(t,confident_average_5,col='red',lty=2)\nlines(t,quantile[100,],col='red')\nlegend('topleft',c(paste(c(10,25,50,75,90),'th quantiles',sep = ''),'Mean'),\n       lwd=c(0.5,0.5),col=c('black','yellow','blue','green','brown','red'),cex = 0.4)\ndev.off()\n\n\n\n\n",
    "created" : 1503601139790.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3279998593",
    "id" : "DEAC9E61",
    "lastKnownWriteTime" : 1503601299,
    "last_content_update" : 1503601299293,
    "path" : "~/Dropbox/Int Gen Mobility/New Version Data and Codes/R codes/dr.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}